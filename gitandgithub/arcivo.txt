Un sistema de control de versiones como Git nos ayuda a guardar el historial de cambios y crecimiento de los archivos de nuestro proyecto.

En realidad, los cambios y diferencias entre las versiones de nuestros proyectos pueden tener similitudes, algunas veces los cambios pueden ser solo una palabra o una parte específica de un archivo específico. Git está optimizado para guardar todos estos cambios de forma atómica e incremental, o sea, aplicando cambios sobre los últimos cambios, estos sobre los cambios anteriores y así hasta el inicio de nuestro proyecto.

El comando para iniciar nuestro repositorio, o sea, indicarle a Git que queremos usar su sistema de control de versiones en nuestro proyecto, es git init.
El comando para que nuestro repositorio sepa de la existencia de un archivo o sus últimos cambios es git add. Este comando no almacena las actualizaciones de forma definitiva, únicamente las guarda en algo que conocemos como “Staging Area” (área de montaje o ensayo).
El comando para almacenar definitivamente todos los cambios que por ahora viven en el staging area es git commit. También podemos guardar un mensaje para recordar muy bien qué cambios hicimos en este commit con el argumento -m "Mensaje del commit".
Por último, si queremos mandar nuestros commits a un servidor remoto, un lugar donde todos podamos conectar nuestros proyectos, usamos el comando git push.
Comandos básicos de git
git init: inicializa un repositorio de GIT en la carpeta donde se ejecute el comando.
git add: añade los archivos especificados al área de preparación (staging).
git commit -m “commit description”: confirma los archivos que se encuentran en el área de preparación y los agrega al repositorio.
git commit -am “commit description”: añade al staging area y hace un commit mediante un solo comando. (No funciona con archivos nuevos)
git status: ofrece una descripción del estado de los archivos (untracked, ready to commit, nothing to commit).
git rm (. -r, filename) (–cached): remueve los archivos del index.
git config --global user.email tu@email.com: configura un email.
git config --global user.name <Nombre como se verá en los commits>: configura un nombre.
git config --list: lista las configuraciones.
Analizar cambios en los archivos de un proyecto Git
git log: lista de manera descendente los commits realizados.
git log --stat: además de listar los commits, muestra la cantidad de bytes añadidos y eliminados en cada uno de los archivos modificados.
git log --all --graph --decorate --oneline: muestra de manera comprimida toda la historia del repositorio de manera gráfica y embellecida.
git show filename: permite ver la historia de los cambios en un archivo.
git diff <commit1> <commit2>: compara diferencias entre en cambios confirmados.
Volver en el tiempo con branches y checkout
git reset <commit> --soft/hard: regresa al commit especificado, eliminando todos los cambios que se hicieron después de ese commit.
git checkout <commit/branch> <filename>: permite regresar al estado en el cual se realizó un commit o branch especificado, pero no elimina lo que está en el staging area.
git checkout – <filePath>: deshacer cambios en un archivo en estado modified (que ni fue agregado a staging)
git rm y git reset
git rm:
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

git rm no puede usarse por sí solo, así nomás. Se debe utilizar uno de los flags para indicar a Git cómo eliminar los archivos que ya no se necesitan en la última versión del proyecto:

git rm --cached <archivo/s>: elimina los archivos del área de Staging y del próximo commit, pero los mantiene en nuestro disco duro.
git rm --force <archivo/s>: elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos aplicar comandos más avanzados).
git reset
Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir.

git reset --soft: Vuelve el branch al estado del commit especificado, manteniendo los archivos en el directorio de trabajo y lo que haya en staging considerando todo como nuevos cambios. Así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: No borra los archivos ni sus modificaciones, solo los saca del área de staging, de forma que los últimos cambios de estos archivos no se envíen al último commit. Si se cambia de opinión se los puede incluir nuevamente con git add.
Ramas o Branches en git
Al crear una nueva rama se copia el último commit en esta nueva rama. Todos los cambios hechos en esta rama no se reflejarán en la rama master hasta que hagamos un merge.

git branch <new branch>: crea una nueva rama.
git checkout <branch name>: se mueve a la rama especificada.
git merge <branch name>: fusiona la rama actual con la rama especificada y produce un nuevo commit de esta fusión.
git branch: lista las ramas generadas.
Aporte creado por: Franco Coloccini

------------------------------------------------------------------------------------------------------

Git
Este comentario está basado en el video, comentarios de éste mismo video y wikipedia.
Personalmente recomiendo leer y guardar el comentario. No se asusten, es sólo un resumen para que no tengan que hacerlo luego.

­

Git es un sistema de control de versiones, pensado para la eficiencia y la confiabilidad del mantenimiento de versiones en un proyecto. Su propósito es llevar un registro de los cambios en archivos de computadora y coordinar el trabajo que varias personas realizan sobre archivos compartidos.
Git permite guardar únicamente los cambios realizados en algún archivo o proyecto y nos permite saber dónde, quién o cuándo se han realizado los cambios.

­

Los comandos básicos en Git son los siguientes:

git init: Permite iniciar el repositorio (lugar donde se almacenarán los cambios).

git add <nombre_archivo>: Git comienza a “trackear”, comienza a hacerle un seguimiento archivo en cuestión.

git commit: Envía los últimos cambios del archivo a la base de datos del sistema de control de versiones. Una buena práctica al usar este comando es añadir -m; al hacer esto, podemos escribir un mensaje que nos permita recordar los cambios que hicimos en ese momento.

git add .: Es un comando que nos permite agregar al repositorio todos los archivos a los cuales se le haya hecho algún cambio.

git status: Permite ver el estado de la base de datos. Por ejemplo, podemos ver si hay algunos cambios que no se han guardado en el repositorio, y si no hay nada nos dirá que todo esta bien.

git show: Mostrara todos los cambios que hemos hecho, esto incluye las líneas que hemos cambiado, cuando y quien hizo dicho cambios.

git log <nombre_archivo>: Muestra todo el historial del archivo.

git push: Permite enviar los cambios realizados a un servidor remoto.

git push origin <nombre_rama>: Sube la rama “nombre_rama” al servidor remoto.

git fetch: Descarga los cambios realizados en el repositorio remoto.

git merge <nombre_rama>: Impacta en la rama en la que te encuentras parado, los cambios realizados en la rama “nombre_rama”.

git pull: Unifica los comandos fetch y merge en un único comando.

git checkout -b <nombre_rama_nueva>: Crea una rama a partir de la que te encuentres parado con el nombre “nombre_rama_nueva”, y luego salta sobre la rama nueva, por lo que quedas parado en esta última.

git checkout -t origin/<nombre_rama>: Si existe una rama remota de nombre “nombre_rama”, al ejecutar este comando se crea una rama local con el nombre “nombre_rama” para hacer un seguimiento de la rama remota con el mismo nombre.

git branch: Lista todas las ramas locales.

git branch -a:Lista todas las ramas locales y remotas.

git branch -d <nombre_rama>: Elimina la rama local con el nombre “nombre_rama”.

git push origin <nombre_rama>: Commitea los cambios desde el branch local origin al branch “nombre_rama”.

git remote prune origin: Actualiza tu repositorio remoto en caso que algún otro desarrollador haya eliminado alguna rama remota.

git reset --hard HEAD: Elimina los cambios realizados que aún no se hayan hecho commit.

git revert <hash_commit>: Revierte el commit realizado, identificado por el “hash_commit”.

Cuando se habla de “quedar parado”, se refiere a donde estás posicionado, dónde o en qué ruta estás realizando los comandos en la terminal.
